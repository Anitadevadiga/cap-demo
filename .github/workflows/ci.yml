name: Build and Deploy

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ecr/private-repo
  CLUSTER_NAME: my-eks
  DEPLOYMENT_NAME: my-app-deployment
  CONTAINER_NAME: my-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1 - Checkout Code
      - name: Checkout code
        uses: actions/checkout@v1	
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3 - Build WAR with Maven
      - name: Build with Maven
        run: mvn clean package --file pom.xml

      # Step 2 - Configure AWS Credentials	   
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

      # Step 3 - Log in to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4 - Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      # Step 5 - Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG \
            123456789012.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 6 - Push Docker image to ECR
      - name: Push Docker image
        run: |
          docker push 382352119835.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 7 - Update Kubernetes deployment
      - name: Update Kubernetes deployment
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          kubectl set image deployment/$DEPLOYMENT_NAME \
            $CONTAINER_NAME=382352119835.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment/$DEPLOYMENT_NAME
